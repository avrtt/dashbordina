version: '3'

services:
  postgres:
    image: postgres:14
    container_name: dashbordina_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - dashbordina_network

  airflow-webserver:
    build:
      context: .
      dockerfile: ./docker/airflow/Dockerfile
    container_name: dashbordina_airflow_webserver
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./app/etl/dags:/opt/airflow/dags
      - ./app/etl/plugins:/opt/airflow/plugins
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: >
      bash -c "airflow db init &&
              airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
              airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - dashbordina_network

  airflow-scheduler:
    build:
      context: .
      dockerfile: ./docker/airflow/Dockerfile
    container_name: dashbordina_airflow_scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./app/etl/dags:/opt/airflow/dags
      - ./app/etl/plugins:/opt/airflow/plugins
      - airflow_logs:/opt/airflow/logs
    command: scheduler
    networks:
      - dashbordina_network

  mock-api:
    build:
      context: .
      dockerfile: ./docker/dash/Dockerfile
    container_name: dashbordina_mock_api
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://airflow:airflow@postgres/airflow
    command: python /app/mock_server.py
    networks:
      - dashbordina_network

  dash-app:
    build:
      context: .
      dockerfile: ./docker/dash/Dockerfile
    container_name: dashbordina_dash_app
    depends_on:
      postgres:
        condition: service_healthy
      mock-api:
        condition: service_started
    volumes:
      - ./app:/app
    ports:
      - "8050:8050"
    environment:
      - DATABASE_URL=postgresql://airflow:airflow@postgres/airflow
      - API_BASE_URL=http://mock-api:8000
      - FLASK_APP=app.main
      - FLASK_ENV=development
    networks:
      - dashbordina_network

volumes:
  postgres_data:
  airflow_logs:

networks:
  dashbordina_network:
    driver: bridge 